// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rc_service.proto

#include "rc_service.pb.h"
#include "rc_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* RCRobot_method_names[] = {
  "/RCRobot/Process",
  "/RCRobot/SendCommand",
  "/RCRobot/ReadData",
};

std::unique_ptr< RCRobot::Stub> RCRobot::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RCRobot::Stub> stub(new RCRobot::Stub(channel, options));
  return stub;
}

RCRobot::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Process_(RCRobot_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendCommand_(RCRobot_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadData_(RCRobot_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RCRobot::Stub::Process(::grpc::ClientContext* context, const ::Command& request, ::Message* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Command, ::Message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Process_, context, request, response);
}

void RCRobot::Stub::async::Process(::grpc::ClientContext* context, const ::Command* request, ::Message* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Command, ::Message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Process_, context, request, response, std::move(f));
}

void RCRobot::Stub::async::Process(::grpc::ClientContext* context, const ::Command* request, ::Message* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Process_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Message>* RCRobot::Stub::PrepareAsyncProcessRaw(::grpc::ClientContext* context, const ::Command& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Message, ::Command, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Process_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Message>* RCRobot::Stub::AsyncProcessRaw(::grpc::ClientContext* context, const ::Command& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProcessRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RCRobot::Stub::SendCommand(::grpc::ClientContext* context, const ::Command& request, ::_None* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Command, ::_None, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendCommand_, context, request, response);
}

void RCRobot::Stub::async::SendCommand(::grpc::ClientContext* context, const ::Command* request, ::_None* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Command, ::_None, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendCommand_, context, request, response, std::move(f));
}

void RCRobot::Stub::async::SendCommand(::grpc::ClientContext* context, const ::Command* request, ::_None* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendCommand_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::_None>* RCRobot::Stub::PrepareAsyncSendCommandRaw(::grpc::ClientContext* context, const ::Command& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::_None, ::Command, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendCommand_, context, request);
}

::grpc::ClientAsyncResponseReader< ::_None>* RCRobot::Stub::AsyncSendCommandRaw(::grpc::ClientContext* context, const ::Command& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendCommandRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RCRobot::Stub::ReadData(::grpc::ClientContext* context, const ::_None& request, ::Message* response) {
  return ::grpc::internal::BlockingUnaryCall< ::_None, ::Message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadData_, context, request, response);
}

void RCRobot::Stub::async::ReadData(::grpc::ClientContext* context, const ::_None* request, ::Message* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::_None, ::Message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadData_, context, request, response, std::move(f));
}

void RCRobot::Stub::async::ReadData(::grpc::ClientContext* context, const ::_None* request, ::Message* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Message>* RCRobot::Stub::PrepareAsyncReadDataRaw(::grpc::ClientContext* context, const ::_None& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Message, ::_None, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Message>* RCRobot::Stub::AsyncReadDataRaw(::grpc::ClientContext* context, const ::_None& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

RCRobot::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RCRobot_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RCRobot::Service, ::Command, ::Message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RCRobot::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Command* req,
             ::Message* resp) {
               return service->Process(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RCRobot_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RCRobot::Service, ::Command, ::_None, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RCRobot::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Command* req,
             ::_None* resp) {
               return service->SendCommand(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RCRobot_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RCRobot::Service, ::_None, ::Message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RCRobot::Service* service,
             ::grpc::ServerContext* ctx,
             const ::_None* req,
             ::Message* resp) {
               return service->ReadData(ctx, req, resp);
             }, this)));
}

RCRobot::Service::~Service() {
}

::grpc::Status RCRobot::Service::Process(::grpc::ServerContext* context, const ::Command* request, ::Message* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RCRobot::Service::SendCommand(::grpc::ServerContext* context, const ::Command* request, ::_None* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RCRobot::Service::ReadData(::grpc::ServerContext* context, const ::_None* request, ::Message* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


