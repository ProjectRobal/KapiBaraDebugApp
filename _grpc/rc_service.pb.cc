// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rc_service.proto

#include "rc_service.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
template <typename>
PROTOBUF_CONSTEXPR _None::_None(
    ::_pbi::ConstantInitialized) {}
struct _NoneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR _NoneDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~_NoneDefaultTypeInternal() {}
  union {
    _None _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 _NoneDefaultTypeInternal __None_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Motor::Motor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.direction_)*/ 0u

  , /*decltype(_impl_.speed_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MotorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MotorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MotorDefaultTypeInternal() {}
  union {
    Motor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MotorDefaultTypeInternal _Motor_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DistanceSensor::DistanceSensor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.distance_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DistanceSensorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DistanceSensorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DistanceSensorDefaultTypeInternal() {}
  union {
    DistanceSensor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DistanceSensorDefaultTypeInternal _DistanceSensor_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Gyroscope::Gyroscope(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.acceleration_)*/ {}

  , /*decltype(_impl_.gyroscope_)*/ {}

  , /*decltype(_impl_.accel_range_)*/ 0

  , /*decltype(_impl_.gyro_range_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GyroscopeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GyroscopeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GyroscopeDefaultTypeInternal() {}
  union {
    Gyroscope _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GyroscopeDefaultTypeInternal _Gyroscope_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Servo::Servo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.angle_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServoDefaultTypeInternal() {}
  union {
    Servo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServoDefaultTypeInternal _Servo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AudioChunk::AudioChunk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/ {}
  ,/* _impl_._data_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AudioChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioChunkDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioChunkDefaultTypeInternal() {}
  union {
    AudioChunk _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioChunkDefaultTypeInternal _AudioChunk_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Command::Command(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ma_)*/nullptr
  , /*decltype(_impl_.mb_)*/nullptr
  , /*decltype(_impl_.ear1_)*/nullptr
  , /*decltype(_impl_.ear2_)*/nullptr} {}
struct CommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandDefaultTypeInternal() {}
  union {
    Command _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandDefaultTypeInternal _Command_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Message::Message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.front_)*/nullptr
  , /*decltype(_impl_.front1_)*/nullptr
  , /*decltype(_impl_.floor_)*/nullptr
  , /*decltype(_impl_.gyroscope_)*/nullptr
  , /*decltype(_impl_.left_)*/nullptr
  , /*decltype(_impl_.right_)*/nullptr
  , /*decltype(_impl_.status_)*/ 0
} {}
struct MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageDefaultTypeInternal _Message_default_instance_;
static ::_pb::Metadata file_level_metadata_rc_5fservice_2eproto[8];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_rc_5fservice_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_rc_5fservice_2eproto = nullptr;
const ::uint32_t TableStruct_rc_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::_None, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Motor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Motor, _impl_.direction_),
    PROTOBUF_FIELD_OFFSET(::Motor, _impl_.speed_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::DistanceSensor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::DistanceSensor, _impl_.distance_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Gyroscope, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Gyroscope, _impl_.acceleration_),
    PROTOBUF_FIELD_OFFSET(::Gyroscope, _impl_.gyroscope_),
    PROTOBUF_FIELD_OFFSET(::Gyroscope, _impl_.accel_range_),
    PROTOBUF_FIELD_OFFSET(::Gyroscope, _impl_.gyro_range_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Servo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Servo, _impl_.angle_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::AudioChunk, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::AudioChunk, _impl_.data_),
    PROTOBUF_FIELD_OFFSET(::Command, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Command, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Command, _impl_.ma_),
    PROTOBUF_FIELD_OFFSET(::Command, _impl_.mb_),
    PROTOBUF_FIELD_OFFSET(::Command, _impl_.ear1_),
    PROTOBUF_FIELD_OFFSET(::Command, _impl_.ear2_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::Message, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Message, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Message, _impl_.front_),
    PROTOBUF_FIELD_OFFSET(::Message, _impl_.front1_),
    PROTOBUF_FIELD_OFFSET(::Message, _impl_.floor_),
    PROTOBUF_FIELD_OFFSET(::Message, _impl_.gyroscope_),
    PROTOBUF_FIELD_OFFSET(::Message, _impl_.left_),
    PROTOBUF_FIELD_OFFSET(::Message, _impl_.right_),
    PROTOBUF_FIELD_OFFSET(::Message, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::Message, _impl_.message_),
    0,
    1,
    2,
    3,
    4,
    5,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::_None)},
        { 8, -1, -1, sizeof(::Motor)},
        { 18, -1, -1, sizeof(::DistanceSensor)},
        { 27, -1, -1, sizeof(::Gyroscope)},
        { 39, -1, -1, sizeof(::Servo)},
        { 48, -1, -1, sizeof(::AudioChunk)},
        { 57, 69, -1, sizeof(::Command)},
        { 73, 89, -1, sizeof(::Message)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::__None_default_instance_._instance,
    &::_Motor_default_instance_._instance,
    &::_DistanceSensor_default_instance_._instance,
    &::_Gyroscope_default_instance_._instance,
    &::_Servo_default_instance_._instance,
    &::_AudioChunk_default_instance_._instance,
    &::_Command_default_instance_._instance,
    &::_Message_default_instance_._instance,
};
const char descriptor_table_protodef_rc_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\020rc_service.proto\"\007\n\005_None\")\n\005Motor\022\021\n\t"
    "direction\030\001 \001(\r\022\r\n\005speed\030\002 \001(\r\"\"\n\016Distan"
    "ceSensor\022\020\n\010distance\030\001 \001(\001\"]\n\tGyroscope\022"
    "\024\n\014acceleration\030\003 \003(\001\022\021\n\tgyroscope\030\006 \003(\001"
    "\022\023\n\013accel_range\030\007 \001(\005\022\022\n\ngyro_range\030\010 \001("
    "\005\"\026\n\005Servo\022\r\n\005angle\030\001 \001(\r\"\034\n\nAudioChunk\022"
    "\016\n\004data\030\200\372\001 \003(\005\"]\n\007Command\022\022\n\002mA\030\001 \001(\0132\006"
    ".Motor\022\022\n\002mB\030\002 \001(\0132\006.Motor\022\024\n\004ear1\030\003 \001(\013"
    "2\006.Servo\022\024\n\004ear2\030\004 \001(\0132\006.Servo\"\341\001\n\007Messa"
    "ge\022\036\n\005front\030\001 \001(\0132\017.DistanceSensor\022\037\n\006fr"
    "ont1\030\002 \001(\0132\017.DistanceSensor\022\036\n\005floor\030\003 \001"
    "(\0132\017.DistanceSensor\022\035\n\tgyroscope\030\004 \001(\0132\n"
    ".Gyroscope\022\031\n\004left\030\005 \001(\0132\013.AudioChunk\022\032\n"
    "\005right\030\006 \001(\0132\013.AudioChunk\022\016\n\006status\030\007 \001("
    "\005\022\017\n\007message\030\010 \001(\t2m\n\007RCRobot\022\037\n\007Process"
    "\022\010.Command\032\010.Message\"\000\022!\n\013SendCommand\022\010."
    "Command\032\006._None\"\000\022\036\n\010ReadData\022\006._None\032\010."
    "Message\"\000b\006proto3"
};
static ::absl::once_flag descriptor_table_rc_5fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_rc_5fservice_2eproto = {
    false,
    false,
    697,
    descriptor_table_protodef_rc_5fservice_2eproto,
    "rc_service.proto",
    &descriptor_table_rc_5fservice_2eproto_once,
    nullptr,
    0,
    8,
    schemas,
    file_default_instances,
    TableStruct_rc_5fservice_2eproto::offsets,
    file_level_metadata_rc_5fservice_2eproto,
    file_level_enum_descriptors_rc_5fservice_2eproto,
    file_level_service_descriptors_rc_5fservice_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_rc_5fservice_2eproto_getter() {
  return &descriptor_table_rc_5fservice_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_rc_5fservice_2eproto(&descriptor_table_rc_5fservice_2eproto);
// ===================================================================

class _None::_Internal {
 public:
};

_None::_None(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:_None)
}
_None::_None(const _None& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _None* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:_None)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData _None::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*_None::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata _None::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rc_5fservice_2eproto_getter, &descriptor_table_rc_5fservice_2eproto_once,
      file_level_metadata_rc_5fservice_2eproto[0]);
}
// ===================================================================

class Motor::_Internal {
 public:
};

Motor::Motor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Motor)
}
Motor::Motor(const Motor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Motor)
}

inline void Motor::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.direction_) { 0u }

    , decltype(_impl_.speed_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Motor::~Motor() {
  // @@protoc_insertion_point(destructor:Motor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Motor::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Motor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Motor::Clear() {
// @@protoc_insertion_point(message_clear_start:Motor)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.direction_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.speed_) -
      reinterpret_cast<char*>(&_impl_.direction_)) + sizeof(_impl_.speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Motor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 direction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Motor::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Motor)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 direction = 1;
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_direction(), target);
  }

  // uint32 speed = 2;
  if (this->_internal_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Motor)
  return target;
}

::size_t Motor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Motor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 direction = 1;
  if (this->_internal_direction() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_direction());
  }

  // uint32 speed = 2;
  if (this->_internal_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_speed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Motor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Motor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Motor::GetClassData() const { return &_class_data_; }


void Motor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Motor*>(&to_msg);
  auto& from = static_cast<const Motor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Motor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_direction() != 0) {
    _this->_internal_set_direction(from._internal_direction());
  }
  if (from._internal_speed() != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Motor::CopyFrom(const Motor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Motor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Motor::IsInitialized() const {
  return true;
}

void Motor::InternalSwap(Motor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Motor, _impl_.speed_)
      + sizeof(Motor::_impl_.speed_)
      - PROTOBUF_FIELD_OFFSET(Motor, _impl_.direction_)>(
          reinterpret_cast<char*>(&_impl_.direction_),
          reinterpret_cast<char*>(&other->_impl_.direction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Motor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rc_5fservice_2eproto_getter, &descriptor_table_rc_5fservice_2eproto_once,
      file_level_metadata_rc_5fservice_2eproto[1]);
}
// ===================================================================

class DistanceSensor::_Internal {
 public:
};

DistanceSensor::DistanceSensor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:DistanceSensor)
}
DistanceSensor::DistanceSensor(const DistanceSensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DistanceSensor)
}

inline void DistanceSensor::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.distance_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DistanceSensor::~DistanceSensor() {
  // @@protoc_insertion_point(destructor:DistanceSensor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DistanceSensor::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void DistanceSensor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DistanceSensor::Clear() {
// @@protoc_insertion_point(message_clear_start:DistanceSensor)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.distance_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DistanceSensor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DistanceSensor::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DistanceSensor)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double distance = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_distance = this->_internal_distance();
  ::uint64_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DistanceSensor)
  return target;
}

::size_t DistanceSensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DistanceSensor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double distance = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_distance = this->_internal_distance();
  ::uint64_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DistanceSensor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DistanceSensor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DistanceSensor::GetClassData() const { return &_class_data_; }


void DistanceSensor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DistanceSensor*>(&to_msg);
  auto& from = static_cast<const DistanceSensor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DistanceSensor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_distance = from._internal_distance();
  ::uint64_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    _this->_internal_set_distance(from._internal_distance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DistanceSensor::CopyFrom(const DistanceSensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DistanceSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistanceSensor::IsInitialized() const {
  return true;
}

void DistanceSensor::InternalSwap(DistanceSensor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.distance_, other->_impl_.distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DistanceSensor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rc_5fservice_2eproto_getter, &descriptor_table_rc_5fservice_2eproto_once,
      file_level_metadata_rc_5fservice_2eproto[2]);
}
// ===================================================================

class Gyroscope::_Internal {
 public:
};

Gyroscope::Gyroscope(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Gyroscope)
}
Gyroscope::Gyroscope(const Gyroscope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Gyroscope* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.acceleration_) { from._impl_.acceleration_ }

    , decltype(_impl_.gyroscope_) { from._impl_.gyroscope_ }

    , decltype(_impl_.accel_range_) {}

    , decltype(_impl_.gyro_range_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.accel_range_, &from._impl_.accel_range_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.gyro_range_) -
    reinterpret_cast<char*>(&_impl_.accel_range_)) + sizeof(_impl_.gyro_range_));
  // @@protoc_insertion_point(copy_constructor:Gyroscope)
}

inline void Gyroscope::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.acceleration_) { arena }

    , decltype(_impl_.gyroscope_) { arena }

    , decltype(_impl_.accel_range_) { 0 }

    , decltype(_impl_.gyro_range_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Gyroscope::~Gyroscope() {
  // @@protoc_insertion_point(destructor:Gyroscope)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Gyroscope::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.acceleration_.~RepeatedField();
  _impl_.gyroscope_.~RepeatedField();
}

void Gyroscope::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Gyroscope::Clear() {
// @@protoc_insertion_point(message_clear_start:Gyroscope)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_acceleration()->Clear();
  _internal_mutable_gyroscope()->Clear();
  ::memset(&_impl_.accel_range_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.gyro_range_) -
      reinterpret_cast<char*>(&_impl_.accel_range_)) + sizeof(_impl_.gyro_range_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Gyroscope::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double acceleration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_acceleration(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 25) {
          _internal_add_acceleration(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated double gyroscope = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_gyroscope(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 49) {
          _internal_add_gyroscope(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 accel_range = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.accel_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 gyro_range = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.gyro_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Gyroscope::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Gyroscope)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double acceleration = 3;
  if (this->_internal_acceleration_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_acceleration(), target);
  }

  // repeated double gyroscope = 6;
  if (this->_internal_gyroscope_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_gyroscope(), target);
  }

  // int32 accel_range = 7;
  if (this->_internal_accel_range() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        7, this->_internal_accel_range(), target);
  }

  // int32 gyro_range = 8;
  if (this->_internal_gyro_range() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        8, this->_internal_gyro_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gyroscope)
  return target;
}

::size_t Gyroscope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gyroscope)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double acceleration = 3;
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_acceleration_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated double gyroscope = 6;
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_gyroscope_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // int32 accel_range = 7;
  if (this->_internal_accel_range() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_accel_range());
  }

  // int32 gyro_range = 8;
  if (this->_internal_gyro_range() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_gyro_range());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Gyroscope::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Gyroscope::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Gyroscope::GetClassData() const { return &_class_data_; }


void Gyroscope::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Gyroscope*>(&to_msg);
  auto& from = static_cast<const Gyroscope&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Gyroscope)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.acceleration_.MergeFrom(from._impl_.acceleration_);
  _this->_impl_.gyroscope_.MergeFrom(from._impl_.gyroscope_);
  if (from._internal_accel_range() != 0) {
    _this->_internal_set_accel_range(from._internal_accel_range());
  }
  if (from._internal_gyro_range() != 0) {
    _this->_internal_set_gyro_range(from._internal_gyro_range());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Gyroscope::CopyFrom(const Gyroscope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gyroscope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gyroscope::IsInitialized() const {
  return true;
}

void Gyroscope::InternalSwap(Gyroscope* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.acceleration_.InternalSwap(&other->_impl_.acceleration_);
  _impl_.gyroscope_.InternalSwap(&other->_impl_.gyroscope_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Gyroscope, _impl_.gyro_range_)
      + sizeof(Gyroscope::_impl_.gyro_range_)
      - PROTOBUF_FIELD_OFFSET(Gyroscope, _impl_.accel_range_)>(
          reinterpret_cast<char*>(&_impl_.accel_range_),
          reinterpret_cast<char*>(&other->_impl_.accel_range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Gyroscope::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rc_5fservice_2eproto_getter, &descriptor_table_rc_5fservice_2eproto_once,
      file_level_metadata_rc_5fservice_2eproto[3]);
}
// ===================================================================

class Servo::_Internal {
 public:
};

Servo::Servo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Servo)
}
Servo::Servo(const Servo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Servo)
}

inline void Servo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.angle_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Servo::~Servo() {
  // @@protoc_insertion_point(destructor:Servo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Servo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Servo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Servo::Clear() {
// @@protoc_insertion_point(message_clear_start:Servo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.angle_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Servo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.angle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Servo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Servo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 angle = 1;
  if (this->_internal_angle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Servo)
  return target;
}

::size_t Servo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Servo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 angle = 1;
  if (this->_internal_angle() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_angle());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Servo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Servo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Servo::GetClassData() const { return &_class_data_; }


void Servo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Servo*>(&to_msg);
  auto& from = static_cast<const Servo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Servo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_angle() != 0) {
    _this->_internal_set_angle(from._internal_angle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Servo::CopyFrom(const Servo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Servo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Servo::IsInitialized() const {
  return true;
}

void Servo::InternalSwap(Servo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.angle_, other->_impl_.angle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Servo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rc_5fservice_2eproto_getter, &descriptor_table_rc_5fservice_2eproto_once,
      file_level_metadata_rc_5fservice_2eproto[4]);
}
// ===================================================================

class AudioChunk::_Internal {
 public:
};

AudioChunk::AudioChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:AudioChunk)
}
AudioChunk::AudioChunk(const AudioChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AudioChunk* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_) { from._impl_.data_ }
    ,/* _impl_._data_cached_byte_size_ = */ { 0 }

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AudioChunk)
}

inline void AudioChunk::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_) { arena }
    ,/* _impl_._data_cached_byte_size_ = */ { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AudioChunk::~AudioChunk() {
  // @@protoc_insertion_point(destructor:AudioChunk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AudioChunk::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
}

void AudioChunk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AudioChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:AudioChunk)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_data()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioChunk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 data = 32000;
      case 32000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 2)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 0) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AudioChunk::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AudioChunk)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 data = 32000;
  {
    int byte_size = _impl_._data_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(32000, _internal_data(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AudioChunk)
  return target;
}

::size_t AudioChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AudioChunk)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 data = 32000;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_data())
    ;
    _impl_._data_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 3 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioChunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AudioChunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioChunk::GetClassData() const { return &_class_data_; }


void AudioChunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AudioChunk*>(&to_msg);
  auto& from = static_cast<const AudioChunk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AudioChunk)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioChunk::CopyFrom(const AudioChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AudioChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioChunk::IsInitialized() const {
  return true;
}

void AudioChunk::InternalSwap(AudioChunk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioChunk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rc_5fservice_2eproto_getter, &descriptor_table_rc_5fservice_2eproto_once,
      file_level_metadata_rc_5fservice_2eproto[5]);
}
// ===================================================================

class Command::_Internal {
 public:
  using HasBits = decltype(std::declval<Command>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Command, _impl_._has_bits_);
  static const ::Motor& ma(const Command* msg);
  static void set_has_ma(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Motor& mb(const Command* msg);
  static void set_has_mb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Servo& ear1(const Command* msg);
  static void set_has_ear1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Servo& ear2(const Command* msg);
  static void set_has_ear2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::Motor&
Command::_Internal::ma(const Command* msg) {
  return *msg->_impl_.ma_;
}
const ::Motor&
Command::_Internal::mb(const Command* msg) {
  return *msg->_impl_.mb_;
}
const ::Servo&
Command::_Internal::ear1(const Command* msg) {
  return *msg->_impl_.ear1_;
}
const ::Servo&
Command::_Internal::ear2(const Command* msg) {
  return *msg->_impl_.ear2_;
}
Command::Command(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Command)
}
Command::Command(const Command& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ma_){nullptr}
    , decltype(_impl_.mb_){nullptr}
    , decltype(_impl_.ear1_){nullptr}
    , decltype(_impl_.ear2_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.ma_ = new ::Motor(*from._impl_.ma_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.mb_ = new ::Motor(*from._impl_.mb_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.ear1_ = new ::Servo(*from._impl_.ear1_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.ear2_ = new ::Servo(*from._impl_.ear2_);
  }
  // @@protoc_insertion_point(copy_constructor:Command)
}

inline void Command::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ma_){nullptr}
    , decltype(_impl_.mb_){nullptr}
    , decltype(_impl_.ear1_){nullptr}
    , decltype(_impl_.ear2_){nullptr}
  };
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:Command)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ma_;
  if (this != internal_default_instance()) delete _impl_.mb_;
  if (this != internal_default_instance()) delete _impl_.ear1_;
  if (this != internal_default_instance()) delete _impl_.ear2_;
}

void Command::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:Command)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.ma_ != nullptr);
      _impl_.ma_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.mb_ != nullptr);
      _impl_.mb_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.ear1_ != nullptr);
      _impl_.ear1_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.ear2_ != nullptr);
      _impl_.ear2_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Motor mA = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ma(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Motor mB = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mb(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Servo ear1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ear1(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Servo ear2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ear2(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Command::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .Motor mA = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ma(this),
        _Internal::ma(this).GetCachedSize(), target, stream);
  }

  // .Motor mB = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::mb(this),
        _Internal::mb(this).GetCachedSize(), target, stream);
  }

  // .Servo ear1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::ear1(this),
        _Internal::ear1(this).GetCachedSize(), target, stream);
  }

  // .Servo ear2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::ear2(this),
        _Internal::ear2(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command)
  return target;
}

::size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .Motor mA = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ma_);
    }

    // .Motor mB = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mb_);
    }

    // .Servo ear1 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ear1_);
    }

    // .Servo ear2 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ear2_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command::GetClassData() const { return &_class_data_; }


void Command::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command*>(&to_msg);
  auto& from = static_cast<const Command&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ma()->::Motor::MergeFrom(
          from._internal_ma());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_mb()->::Motor::MergeFrom(
          from._internal_mb());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_ear1()->::Servo::MergeFrom(
          from._internal_ear1());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_ear2()->::Servo::MergeFrom(
          from._internal_ear2());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::InternalSwap(Command* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command, _impl_.ear2_)
      + sizeof(Command::_impl_.ear2_)
      - PROTOBUF_FIELD_OFFSET(Command, _impl_.ma_)>(
          reinterpret_cast<char*>(&_impl_.ma_),
          reinterpret_cast<char*>(&other->_impl_.ma_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Command::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rc_5fservice_2eproto_getter, &descriptor_table_rc_5fservice_2eproto_once,
      file_level_metadata_rc_5fservice_2eproto[6]);
}
// ===================================================================

class Message::_Internal {
 public:
  using HasBits = decltype(std::declval<Message>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Message, _impl_._has_bits_);
  static const ::DistanceSensor& front(const Message* msg);
  static void set_has_front(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::DistanceSensor& front1(const Message* msg);
  static void set_has_front1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::DistanceSensor& floor(const Message* msg);
  static void set_has_floor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Gyroscope& gyroscope(const Message* msg);
  static void set_has_gyroscope(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::AudioChunk& left(const Message* msg);
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::AudioChunk& right(const Message* msg);
  static void set_has_right(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::DistanceSensor&
Message::_Internal::front(const Message* msg) {
  return *msg->_impl_.front_;
}
const ::DistanceSensor&
Message::_Internal::front1(const Message* msg) {
  return *msg->_impl_.front1_;
}
const ::DistanceSensor&
Message::_Internal::floor(const Message* msg) {
  return *msg->_impl_.floor_;
}
const ::Gyroscope&
Message::_Internal::gyroscope(const Message* msg) {
  return *msg->_impl_.gyroscope_;
}
const ::AudioChunk&
Message::_Internal::left(const Message* msg) {
  return *msg->_impl_.left_;
}
const ::AudioChunk&
Message::_Internal::right(const Message* msg) {
  return *msg->_impl_.right_;
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_) {}

    , decltype(_impl_.front_){nullptr}
    , decltype(_impl_.front1_){nullptr}
    , decltype(_impl_.floor_){nullptr}
    , decltype(_impl_.gyroscope_){nullptr}
    , decltype(_impl_.left_){nullptr}
    , decltype(_impl_.right_){nullptr}
    , decltype(_impl_.status_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.front_ = new ::DistanceSensor(*from._impl_.front_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.front1_ = new ::DistanceSensor(*from._impl_.front1_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.floor_ = new ::DistanceSensor(*from._impl_.floor_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.gyroscope_ = new ::Gyroscope(*from._impl_.gyroscope_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.left_ = new ::AudioChunk(*from._impl_.left_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
    _this->_impl_.right_ = new ::AudioChunk(*from._impl_.right_);
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:Message)
}

inline void Message::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_) {}

    , decltype(_impl_.front_){nullptr}
    , decltype(_impl_.front1_){nullptr}
    , decltype(_impl_.floor_){nullptr}
    , decltype(_impl_.gyroscope_){nullptr}
    , decltype(_impl_.left_){nullptr}
    , decltype(_impl_.right_){nullptr}
    , decltype(_impl_.status_) { 0 }

  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.front_;
  if (this != internal_default_instance()) delete _impl_.front1_;
  if (this != internal_default_instance()) delete _impl_.floor_;
  if (this != internal_default_instance()) delete _impl_.gyroscope_;
  if (this != internal_default_instance()) delete _impl_.left_;
  if (this != internal_default_instance()) delete _impl_.right_;
}

void Message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:Message)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.front_ != nullptr);
      _impl_.front_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.front1_ != nullptr);
      _impl_.front1_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.floor_ != nullptr);
      _impl_.floor_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.gyroscope_ != nullptr);
      _impl_.gyroscope_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.left_ != nullptr);
      _impl_.left_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.right_ != nullptr);
      _impl_.right_->Clear();
    }
  }
  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DistanceSensor front = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_front(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .DistanceSensor front1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_front1(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .DistanceSensor floor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_floor(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Gyroscope gyroscope = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gyroscope(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .AudioChunk left = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_left(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .AudioChunk right = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_right(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string message = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Message.message"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Message::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Message)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .DistanceSensor front = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::front(this),
        _Internal::front(this).GetCachedSize(), target, stream);
  }

  // .DistanceSensor front1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::front1(this),
        _Internal::front1(this).GetCachedSize(), target, stream);
  }

  // .DistanceSensor floor = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::floor(this),
        _Internal::floor(this).GetCachedSize(), target, stream);
  }

  // .Gyroscope gyroscope = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::gyroscope(this),
        _Internal::gyroscope(this).GetCachedSize(), target, stream);
  }

  // .AudioChunk left = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::left(this),
        _Internal::left(this).GetCachedSize(), target, stream);
  }

  // .AudioChunk right = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::right(this),
        _Internal::right(this).GetCachedSize(), target, stream);
  }

  // int32 status = 7;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        7, this->_internal_status(), target);
  }

  // string message = 8;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "Message.message");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Message)
  return target;
}

::size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Message)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 8;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // .DistanceSensor front = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.front_);
    }

    // .DistanceSensor front1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.front1_);
    }

    // .DistanceSensor floor = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.floor_);
    }

    // .Gyroscope gyroscope = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gyroscope_);
    }

    // .AudioChunk left = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.left_);
    }

    // .AudioChunk right = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.right_);
    }

  }
  // int32 status = 7;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }


void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message*>(&to_msg);
  auto& from = static_cast<const Message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Message)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_front()->::DistanceSensor::MergeFrom(
          from._internal_front());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_front1()->::DistanceSensor::MergeFrom(
          from._internal_front1());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_floor()->::DistanceSensor::MergeFrom(
          from._internal_floor());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_gyroscope()->::Gyroscope::MergeFrom(
          from._internal_gyroscope());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_left()->::AudioChunk::MergeFrom(
          from._internal_left());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_right()->::AudioChunk::MergeFrom(
          from._internal_right());
    }
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, lhs_arena,
                                       &other->_impl_.message_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message, _impl_.status_)
      + sizeof(Message::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(Message, _impl_.front_)>(
          reinterpret_cast<char*>(&_impl_.front_),
          reinterpret_cast<char*>(&other->_impl_.front_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rc_5fservice_2eproto_getter, &descriptor_table_rc_5fservice_2eproto_once,
      file_level_metadata_rc_5fservice_2eproto[7]);
}
// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::_None*
Arena::CreateMaybeMessage< ::_None >(Arena* arena) {
  return Arena::CreateMessageInternal< ::_None >(arena);
}
template<> PROTOBUF_NOINLINE ::Motor*
Arena::CreateMaybeMessage< ::Motor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Motor >(arena);
}
template<> PROTOBUF_NOINLINE ::DistanceSensor*
Arena::CreateMaybeMessage< ::DistanceSensor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DistanceSensor >(arena);
}
template<> PROTOBUF_NOINLINE ::Gyroscope*
Arena::CreateMaybeMessage< ::Gyroscope >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Gyroscope >(arena);
}
template<> PROTOBUF_NOINLINE ::Servo*
Arena::CreateMaybeMessage< ::Servo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Servo >(arena);
}
template<> PROTOBUF_NOINLINE ::AudioChunk*
Arena::CreateMaybeMessage< ::AudioChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AudioChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::Command*
Arena::CreateMaybeMessage< ::Command >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command >(arena);
}
template<> PROTOBUF_NOINLINE ::Message*
Arena::CreateMaybeMessage< ::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
